name: Version

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  version:
    runs-on: ubuntu-latest
    # Only run if not triggered by this workflow itself (avoid infinite loop)
    if: "!contains(github.event.head_commit.message, 'chore: bump version')"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Get last tag
        id: get_tag
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "No previous tag found, starting from initial commit"
            LAST_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "last_tag=$LAST_TAG" >> $GITHUB_OUTPUT
          echo "Last tag: $LAST_TAG"

      - name: Determine version bump
        id: version_bump
        run: |
          LAST_TAG="${{ steps.get_tag.outputs.last_tag }}"
          
          # Get commits since last tag (excluding version bump commits)
          if [[ "$LAST_TAG" =~ ^v[0-9] ]]; then
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s" --no-merges | grep -v "chore: bump version")
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s" --no-merges | grep -v "chore: bump version")
          fi
          
          echo "Commits since last tag:"
          echo "$COMMITS"
          
          # If no commits (only version bumps), don't bump
          if [ -z "$COMMITS" ]; then
            echo "bump_type=none" >> $GITHUB_OUTPUT
            echo "No relevant commits found, skipping version bump"
          else
            BUMP_TYPE="patch"
            
            # Check for major version bump (BREAKING CHANGE or feat!:)
            if echo "$COMMITS" | grep -qE "(BREAKING CHANGE|!:|^feat!|^fix!)"; then
              BUMP_TYPE="major"
            # Check for minor version bump (feat:)
            elif echo "$COMMITS" | grep -qE "^feat"; then
              BUMP_TYPE="minor"
            fi
            
            echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
            echo "Version bump type: $BUMP_TYPE"
          fi

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Calculate new version
        id: new_version
        if: steps.version_bump.outputs.bump_type != 'none'
        run: |
          CURRENT="${{ steps.current_version.outputs.current_version }}"
          BUMP_TYPE="${{ steps.version_bump.outputs.bump_type }}"
          
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"
          
          case "$BUMP_TYPE" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Check if version bump is needed
        id: check_bump
        if: steps.version_bump.outputs.bump_type != 'none'
        run: |
          CURRENT="${{ steps.current_version.outputs.current_version }}"
          NEW="${{ steps.new_version.outputs.new_version }}"
          
          if [ "$CURRENT" != "$NEW" ]; then
            echo "bump_needed=true" >> $GITHUB_OUTPUT
            echo "Version bump needed: $CURRENT -> $NEW"
          else
            echo "bump_needed=false" >> $GITHUB_OUTPUT
            echo "No version bump needed"
          fi

      - name: Generate changelog
        if: steps.check_bump.outputs.bump_needed == 'true'
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          LAST_TAG="${{ steps.get_tag.outputs.last_tag }}"
          
          # Generate changelog
          FROM_TAG="$LAST_TAG" VERSION="$NEW_VERSION" node scripts/generate-changelog.js "$NEW_VERSION" "$LAST_TAG"
          echo "Changelog generated for version $NEW_VERSION"

      - name: Bump version in package.json
        if: steps.check_bump.outputs.bump_needed == 'true'
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          pnpm pkg set version="$NEW_VERSION"
          echo "Version updated to $NEW_VERSION"

      - name: Commit and tag
        if: steps.check_bump.outputs.bump_needed == 'true'
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json CHANGELOG.md
          git commit -m "chore: bump version to $NEW_VERSION"
          git tag -a "v${NEW_VERSION}" -m "Release v${NEW_VERSION}"
          git push origin main
          git push origin "v${NEW_VERSION}"

